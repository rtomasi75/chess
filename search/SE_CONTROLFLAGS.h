#pragma once
#ifndef SE_CONTROLFLAGSFLAGS_H
#define SE_CONTROLFLAGSFLAGS_H

#include <cstdint>

typedef std::uint32_t SE_CONTROLFLAGS;

#define CONTROLFLAGS_NONE			UINT32_C(0x00000000)
#define CONTROLFLAGS_WORKERID		UINT32_C(0x000000FF)
#define CONTROLFLAGS_PARENTID		UINT32_C(0x0000FF00)
#define CONTROLFLAGS_ACTIVE			UINT32_C(0x40000000)
#define CONTROLFLAGS_ROOT			UINT32_C(0x80000000)
#define CONTROLFLAGS_INITIALIZED	UINT32_C(0x20000000)

#define CONTROLFLAGS_SHIFT_WORKERID 8
#define CONTROLFLAGS_SHIFT_PARENTID 8

#define CONTROLFLAGS_GET_WORKERID(flags)		((flags) & CONTROLFLAGS_WORKERID)
#define CONTROLFLAGS_GET_PARENTID(flags)		(((flags) & CONTROLFLAGS_PARENTID) >> 8)
#define CONTROLFLAGS_IS_ACTIVE(flags)			(((flags) & CONTROLFLAGS_ACTIVE) != 0)
#define CONTROLFLAGS_IS_ROOT(flags)				(((flags) & CONTROLFLAGS_ROOT) != 0)
#define CONTROLFLAGS_IS_INITIALIZED(flags)		(((flags) & CONTROLFLAGS_INITIALIZED) != 0)

#define CONTROLFLAGS_SET_WORKERID(flags, id)	do{ flags&=~CONTROLFLAGS_WORKERID; flags|=(id)<<CONTROLFLAGS_SHIFT_WORKERID;} while(false)
#define CONTROLFLAGS_SET_PARENTID(flags, id)	do{ flags&=~CONTROLFLAGS_PARENTID; flags|=(id)<<CONTROLFLAGS_SHIFT_PARENTID;} while(false)
#define CONTROLFLAGS_SET_ACTIVE(flags)			do{ flags|=CONTROLFLAGS_ACTIVE; } while(false)
#define CONTROLFLAGS_SET_ROOT(flags)			do{ flags|=CONTROLFLAGS_ROOT; } while(false)
#define CONTROLFLAGS_SET_INITIALIZED(flags)		do{ flags|=CONTROLFLAGS_INITIALIZED; } while(false)

#define CONTROLFLAGS_CLEAR(flags)	do { flags = CONTROLFLAGS_NONE; } while(false)


#endif // SE_CONTROLFLAGSFLAGS_H