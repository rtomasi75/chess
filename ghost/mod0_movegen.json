{
  "module": "mod0",
  "version": "1.0.0",
  "description": "Move generation core for DixieKnight. Includes all macros, typedefs, structs, and function signatures extracted from movegen/.",
  "scope": {
    "folder": "movegen/"
  },
  "typedefs": [
    "\ntypedef std::uint64_t MG_HASH;",
    "\r\ntypedef std::int16_t MG_JUMPTARGETSINDEX;",
    "\r\ntypedef std::int16_t MG_MOVEINDEX;",
    "\r\ntypedef std::int16_t MG_SLIDETARGETINDEX;",
    "\r\ntypedef std::int32_t MG_SLIDEENTRYINDEX;",
    "\r\ntypedef std::int8_t MG_OPTIONINDEX;",
    "\r\ntypedef std::int8_t MG_PIECETYPE;",
    "\r\ntypedef std::int8_t MG_PLAYER;",
    "\r\ntypedef std::int8_t MG_SLIDEMASKINDEX;",
    "\r\ntypedef std::int8_t MG_TABLEINDEX;",
    "\r\ntypedef std::uint16_t MG_COMPRESSEDTARGETS;",
    "\r\ntypedef std::uint16_t MG_MOVE;",
    "\r\ntypedef std::uint8_t MG_CASTLEFLAGS;",
    "\r\ntypedef std::uint8_t MG_DIRTYFLAGS;",
    "\r\ntypedef std::uint8_t MG_HALFMOVECOUNT;",
    "\r\ntypedef std::uint8_t MG_MOVEMECHANIC;",
    "\r\ntypedef std::uint8_t MG_MOVETYPE;",
    "\r\ntypedef void(*MG_GenerateMovesFn)(const MG_MOVEGEN*, MG_POSITION*, const MG_PIECETYPE&, MG_MOVELIST*);",
    "typedef std::uint16_t MG_FULLMOVECOUNT;"
  ],
  "struct_definitions": [
    "struct MG_MOVEDATA\r\n{\r\n\tMG_HASH OldHash;\r\n\tMG_CASTLEFLAGS OldCastlingRights;\r\n\tBB_FILEINDEX OldEnPassantFile;\r\n\tMG_DIRTYFLAGS DirtyFlags[COUNT_PLAYERS];\r\n\tMG_HALFMOVECOUNT OldHalfMoveClock;\r\n#ifndef MOVEGEN_COMPACT_MOVEDATA\r\n\tBB_BITBOARD AttacksByPlayer[COUNT_PLAYERS];\r\n\tBB_BITBOARD AttacksByPlayerPiece[COUNT_PLAYERS][COUNT_PIECETYPES];\r\n\tBB_BITBOARD InterestByPlayerPiece[COUNT_PLAYERS][COUNT_PIECETYPES];\r\n#endif\r\n#ifndef NDEBUG\r\n#ifdef MOVEGEN_DEBUG_POSITION\r\n\tMG_POSITION* pOldPosition;\r\n#endif\r\n#endif\r\n};",
    "struct MG_MOVEGEN\r\n{\r\n\tMG_PIECEINFO PieceInfo[COUNT_PLAYERS][COUNT_PIECETYPES];\r\n\tMG_SLIDEMASKS SlideMasks[COUNT_SLIDEMASKS];\r\n\tMG_JUMPTABLE JumpTable[COUNT_JUMPTABLES];\r\n\tMG_SLIDELOOKUP SlideLookUp[COUNT_SLIDELOOKUPS];\r\n\tMG_SLIDELOOKUP_COLD SlideLookUpCold[COUNT_SLIDELOOKUPS];\r\n\tBB_BITBOARD JumpTargets[COUNT_JUMPTARGETS][COUNT_SQUARES];\r\n\tMG_PAWNTABLE PawnTable[COUNT_PLAYERS];\r\n\tMG_MOVEINFO* MoveTable[COUNT_PLAYERS];\r\n\tMG_SLIDEENTRY* SlideEntries;\r\n\tMG_MOVE CountMoves[COUNT_PLAYERS];\r\n\tMG_MOVE CastleBase[COUNT_PLAYERS];\r\n\tMG_SLIDEENTRYINDEX CountSlideEntries;\r\n\tchar* MoveString[COUNT_PLAYERS]; \r\n};",
    "struct MG_MOVELIST\r\n{\r\n\tMG_MOVEINDEX CountMoves;\r\n\tMG_MOVE Move[MAX_MOVES];\r\n};",
    "struct MG_PAWNTABLE\r\n{\r\n\tMG_MOVE QuietBase;\r\n\tMG_MOVE CaptureBase;\r\n\tMG_MOVE PromotionBase;\r\n\tMG_MOVE PromoCaptureBase;\r\n\tMG_MOVE DoublePushBase;\r\n\tMG_MOVE EnPassantBase;\r\n};",
    "struct MG_SLIDEMASKS\r\n{\r\n\tBB_BITBOARD Mask[COUNT_SQUARES];\r\n\tBB_BITBOARD PotentialTargets[COUNT_SQUARES];\r\n\tMG_SLIDEENTRYINDEX BaseEntry[COUNT_SQUARES];\r\n\tMG_SLIDEENTRYINDEX CountEntries[COUNT_SQUARES];\r\n\tBB_SQUARECOUNT CountMaskBits[COUNT_SQUARES];\r\n\tBB_SQUARECOUNT CountPotentialTargetsBits[COUNT_SQUARES];\r\n\tMG_SLIDETARGETINDEX CountPotentialTargets[COUNT_SQUARES];\r\n};",
    "struct MG_TENTATIVEMOVEDATA\r\n{\r\n\tMG_DIRTYFLAGS DirtyFlags[COUNT_PLAYERS];\r\n#ifndef MOVEGEN_COMPACT_MOVEDATA\r\n\tBB_BITBOARD AttacksByPlayer[COUNT_PLAYERS];\r\n\tBB_BITBOARD AttacksByPlayerPiece[COUNT_PLAYERS][COUNT_PIECETYPES];\r\n\tBB_BITBOARD InterestByPlayerPiece[COUNT_PLAYERS][COUNT_PIECETYPES];\r\n#endif\r\n\tBB_FILEINDEX OldEnPassantFile;\r\n#ifndef NDEBUG\r\n#ifdef MOVEGEN_DEBUG_POSITION\r\n\tMG_POSITION* pOldPosition;\r\n#endif\r\n#endif\r\n};"
  ],
  "macros": [
    "\n#define HASH_EMPTY UINT64_C(0)",
    "\n#define HASH_MOVINGPLAYER_BLACK UINT64_C(0x1B2699D5006885DF)",
    "\r\n#define CASTLEFLAGS_NONE UINT8_C(0)\r",
    "\r\n#define CASTLEINTEREST_KINGSIDE_WHITE (SQUARE_E1|SQUARE_F1|SQUARE_G1)\r",
    "\r\n#define CASTLEWALK_KINGSIDE_WHITE (SQUARE_F1|SQUARE_G1)\r",
    "\r\n#define COUNT_JUMPTABLES (2*(1+COUNT_PIECETYPES))\r",
    "\r\n#define COUNT_JUMPTARGETS 2\r",
    "\r\n#define COUNT_MOVEMECHANICS 5\r",
    "\r\n#define COUNT_MOVETYPES 3\r",
    "\r\n#define COUNT_PIECETYPES 6\r",
    "\r\n#define COUNT_PLAYERS 2\r",
    "\r\n#define COUNT_SLIDELOOKUPS 6\r",
    "\r\n#define COUNT_SLIDEMASKS 2\r",
    "\r\n#define COUNT_TABLEINDICES (COUNT_PIECETYPES+2)\r",
    "\r\n#define JUMPTABLE_KING_QUIET 0\r",
    "\r\n#define JUMPTARGETS_KING 0\r",
    "\r\n#define MAX_MOVES INT16_C(255)\r",
    "\r\n#define MOVEGEN_COMPACT_MOVEDATA\r",
    "\r\n#define MOVEGEN_COMPACT_MOVEINFO\r",
    "\r\n#define MOVEGEN_COMPACT_TARGETS\r",
    "\r\n#define MOVEGEN_COUNT_PROMOPIECES 4\r",
    "\r\n#define MOVEGEN_DEBUG_POSITION\r",
    "\r\n#define MOVEGEN_LEGAL\r",
    "\r\n#define MOVEGEN_USE_DYNAMIC_PREFETCH\r",
    "\r\n#define MOVEMECHANIC_NONE 0\r",
    "\r\n#define MOVESTRING_LENGTH 6\r",
    "\r\n#define MOVETYPE_QUIET 0\r",
    "\r\n#define MOVE_NULLMOVE UINT16_C(0)\r",
    "\r\n#define PIECETYPE_NONE INT8_C(-1)\r",
    "\r\n#define PLAYER_NONE INT8_C(-1)\r",
    "\r\n#define PLAYER_OTHER(_PL_) ((MG_PLAYER)(((_PL_)+1)%COUNT_PLAYERS))\r",
    "\r\n#define SLIDELOOKUP_ROOK_QUIET 0\r",
    "\r\n#define SLIDEMASKS_UNROLL_ATTACKS    4\r",
    "\r\n#define SLIDEMASKS_UNROLL_LOOP_ATTACKS(prefetchDistance, countMasks, slideMaskIndex, maskIndexPtr, body) \\\r",
    "\r\n#define SLIDEMASKS_UNROLL_LOOP_GENERATION(prefetchDistance, countMasks, slideMaskIndex, maskIndexPtr, baseAccess, fromSquareIndex, pieceIndex, body) \\\r",
    "#define CASTLEFLAGS_BLACK_KINGSIDE UINT8_C(4)\r",
    "#define CASTLEFLAGS_BLACK_QUEENSIDE UINT8_C(8)\r",
    "#define CASTLEFLAGS_WHITE_KINGSIDE UINT8_C(1)\r",
    "#define CASTLEFLAGS_WHITE_QUEENSIDE UINT8_C(2)\r",
    "#define CASTLEINTEREST_KINGSIDE_BLACK (SQUARE_E8|SQUARE_F8|SQUARE_G8)\r",
    "#define CASTLEINTEREST_QUEENSIDE_BLACK (SQUARE_E8|SQUARE_D8|SQUARE_C8)\r",
    "#define CASTLEINTEREST_QUEENSIDE_WHITE (SQUARE_E1|SQUARE_D1|SQUARE_C1)\r",
    "#define CASTLEWALK_KINGSIDE_BLACK (SQUARE_F8|SQUARE_G8)\r",
    "#define CASTLEWALK_QUEENSIDE_BLACK (SQUARE_D8|SQUARE_C8|SQUARE_B8)\r",
    "#define CASTLEWALK_QUEENSIDE_WHITE (SQUARE_D1|SQUARE_C1|SQUARE_B1)\r",
    "#define COUNT_ROYALPIECES 1\r",
    "#define JUMPTABLE_KING_CAPTURE(_PIECE_) (JUMPTABLE_KING_QUIET+(_PIECE_)+1)\r",
    "#define JUMPTABLE_KNIGHT_CAPTURE(_PIECE_) (JUMPTABLE_KNIGHT_QUIET+(_PIECE_)+1)\r",
    "#define JUMPTABLE_KNIGHT_QUIET JUMPTABLE_KING_CAPTURE(COUNT_PIECETYPES)\r",
    "#define JUMPTARGETS_KNIGHT 1\r",
    "#define MG_BISHOP_H\r",
    "#define MG_CASTLEFLAGS_H\r",
    "#define MG_HASH_H",
    "#define MG_JUMPTABLE_H\r",
    "#define MG_KING_H\r",
    "#define MG_KNIGHT_H\r",
    "#define MG_MOVEDATA_H\r",
    "#define MG_MOVEINFO_H\r",
    "#define MG_MOVELIST_H\r",
    "#define MG_MOVEMECHANIC_H\r",
    "#define MG_MOVETYPE_H\r",
    "#define MG_MOVE_H\r",
    "#define MG_PAWN_H\r",
    "#define MG_PIECEINFO_H\r",
    "#define MG_PIECETYPE_H\r",
    "#define MG_PLAYER_H\r",
    "#define MG_POSITION_H\r",
    "#define MG_QUEEN_H\r",
    "#define MG_ROOK_H\r",
    "#define MG_SETUP_H\r",
    "#define MG_SLIDEENTRY_H\r",
    "#define MG_SLIDELOOKUP_H\r",
    "#define MG_SLIDEMASKS_H\r",
    "#define MOVEMECHANIC_CASTLE 4\r",
    "#define MOVEMECHANIC_JUMPTABLE 1\r",
    "#define MOVEMECHANIC_PAWN 3\r",
    "#define MOVEMECHANIC_SLIDETABLE 2\r",
    "#define MOVETYPE_CAPTURE 1\r",
    "#define MOVETYPE_SPECIAL 2\r",
    "#define PIECETYPE_BISHOP INT8_C(3)\r",
    "#define PIECETYPE_KING INT8_C(0)\r",
    "#define PIECETYPE_KNIGHT INT8_C(2)\r",
    "#define PIECETYPE_PAWN INT8_C(5)\r",
    "#define PIECETYPE_QUEEN INT8_C(4)\r",
    "#define PIECETYPE_ROOK INT8_C(1)\r",
    "#define PLAYER_BLACK INT8_C(1)\r",
    "#define PLAYER_WHITE INT8_C(0)\r",
    "#define SLIDELOOKUP_BISHOP_CAPTURE 3\r",
    "#define SLIDELOOKUP_BISHOP_QUIET 2\r",
    "#define SLIDELOOKUP_QUEEN_CAPTURE 5\r",
    "#define SLIDELOOKUP_QUEEN_QUIET 4\r",
    "#define SLIDELOOKUP_ROOK_CAPTURE 1\r",
    "#define SLIDEMASKS_CONSTEXPR_IF_STATIC const\r",
    "#define SLIDEMASKS_CONSTEXPR_IF_STATIC constexpr\r",
    "#define SLIDEMASKS_DIAGONAL 1\r",
    "#define SLIDEMASKS_GENERATION_PREFETCH_DISTANCE_ATTACKS ((CM_ALIGNMENT_CACHELINE / SLIDEMASKS_PREFETCH_UNIT_ATTACKS) - 1)\r",
    "#define SLIDEMASKS_GENERATION_PREFETCH_DISTANCE_ATTACKS SLIDEMASKS_TunePrefetchDistance_Attacks(countMasks,1)\r",
    "#define SLIDEMASKS_GENERATION_PREFETCH_DISTANCE_ATTACKS_UNROLLED ((CM_ALIGNMENT_CACHELINE / (SLIDEMASKS_PREFETCH_UNIT_ATTACKS * SLIDEMASKS_UNROLL_ATTACKS)) - 1)\r",
    "#define SLIDEMASKS_GENERATION_PREFETCH_DISTANCE_ATTACKS_UNROLLED SLIDEMASKS_TunePrefetchDistance_Attacks(countMasks,SLIDEMASKS_UNROLL_ATTACKS)\r",
    "#define SLIDEMASKS_GENERATION_PREFETCH_DISTANCE_GENERATION ((CM_ALIGNMENT_CACHELINE / SLIDEMASKS_PREFETCH_UNIT_GENERATION) - 1)\r",
    "#define SLIDEMASKS_GENERATION_PREFETCH_DISTANCE_GENERATION SLIDEMASKS_TunePrefetchDistance_Generation(countMasks,1)\r",
    "#define SLIDEMASKS_GENERATION_PREFETCH_DISTANCE_GENERATION_UNROLLED ((CM_ALIGNMENT_CACHELINE / (SLIDEMASKS_PREFETCH_UNIT_GENERATION * SLIDEMASKS_UNROLL_GENERATION)) - 1)\r",
    "#define SLIDEMASKS_GENERATION_PREFETCH_DISTANCE_GENERATION_UNROLLED SLIDEMASKS_TunePrefetchDistance_Generation(countMasks,SLIDEMASKS_UNROLL_GENERATION)\r",
    "#define SLIDEMASKS_HORIZONTAL 0\r",
    "#define SLIDEMASKS_UNROLL_GENERATION 2\r",
    "#define TABLEINDEX_CAPTURE(_PIECE_) (2+(_PIECE_))\r",
    "#define TABLEINDEX_QUIET 0\r",
    "#define TABLEINDEX_SPECIAL 1\r"
  ],
  "function_signatures": [
    "void BISHOP_CountMoves(const MG_MOVEGEN* pMoveGen, const MG_PLAYER& movingPlayer);",
    "void BISHOP_Initialize_CaptureMoves(const MG_PLAYER& player, MG_MOVEGEN* pMoveGen, MG_MOVE& nextMove);",
    "void BISHOP_Initialize_CaptureMoves(movingPlayer, pMoveGen, nextMove);",
    "void BISHOP_Initialize_LookUps(MG_MOVEGEN* pMoveGen);",
    "void BISHOP_Initialize_LookUps(pMoveGen);",
    "void BISHOP_Initialize_PieceInfo(&pMoveGen->PieceInfo[movingPlayer][PIECETYPE_BISHOP]);",
    "void BISHOP_Initialize_PieceInfo(MG_PIECEINFO* pPieceInfo);",
    "void BISHOP_Initialize_QuietMoves(const MG_PLAYER& player, MG_MOVEGEN* pMoveGen, MG_MOVE& nextMove);",
    "void BISHOP_Initialize_QuietMoves(movingPlayer, pMoveGen, nextMove);",
    "void CASTLEFLAGS_EliminateFlags_Capture(const MG_PLAYER& movingPlayer, const MG_PIECETYPE& movingPiece, const BB_SQUARE& fromSquare, const BB_SQUARE& toSquare, const MG_PIECETYPE& capturedPiece);",
    "void CASTLEFLAGS_EliminateFlags_Move(const MG_PLAYER& movingPlayer, const MG_PIECETYPE& movingPiece, const BB_SQUARE& fromSquare, const BB_SQUARE& toSquare);",
    "void CASTLEFLAGS_Parse(const char* pString, const int& len, int& strPos, MG_CASTLEFLAGS& outCastleFlags);",
    "void CASTLEFLAGS_ToString(char* pString, const int& len, int& strPos, const MG_CASTLEFLAGS& castleFlags);",
    "void HASH_CastleRights(const MG_CASTLEFLAGS& castlingRights);",
    "void HASH_EnPassantFile(const BB_FILEINDEX& epFileIndex);",
    "void HASH_PlayerPieceSquare(const MG_PLAYER& player, const MG_PIECETYPE& piece, const BB_SQUARE& square);",
    "void JUMPTABLE_CountMoves(const MG_MOVEGEN* pMoveGen, const int& jumptarget);",
    "void JUMPTABLE_CountMoves(pMoveGen, JUMPTARGETS_KNIGHT);",
    "void JUMPTABLE_GenerateCaptureMoves(const MG_MOVEGEN* pMoveGen, MG_POSITION* pPosition, const MG_PIECETYPE& piece, MG_MOVELIST* pMoveList);",
    "void JUMPTABLE_GenerateQuietMoves(const MG_MOVEGEN* pMoveGen, MG_POSITION* pPosition, const MG_PIECETYPE& piece, MG_MOVELIST* pMoveList);",
    "void JUMPTABLE_GetPieceAttacks(const MG_MOVEGEN* pMoveGen, const MG_POSITION* pPosition, const MG_PIECETYPE& piece, const MG_PLAYER& player, BB_BITBOARD& outInterest);",
    "void JUMPTABLE_GetPieceAttacks(pMoveGen, pPosition, piece, player, outInterest);",
    "void JUMPTABLE_Initialize_CaptureMoves(const MG_PLAYER& player, const MG_PIECETYPE& movingPiece, const MG_PIECETYPE& capturedPiece, MG_MOVEGEN* pMoveGen, MG_MOVE& nextMove, const int& jumptarget, const int& jumptable);",
    "void JUMPTABLE_Initialize_CaptureMoves(player, PIECETYPE_KING, capturedPiece, pMoveGen, nextMove, JUMPTARGETS_KING, JUMPTABLE_KING_CAPTURE(capturedPiece));",
    "void JUMPTABLE_Initialize_CaptureMoves(player, PIECETYPE_KNIGHT, capturedPiece, pMoveGen, nextMove, JUMPTARGETS_KNIGHT, JUMPTABLE_KNIGHT_CAPTURE(capturedPiece));",
    "void JUMPTABLE_Initialize_QuietMoves(const MG_PLAYER& player, const MG_PIECETYPE& piece, MG_MOVEGEN* pMoveGen, MG_MOVE& nextMove, const int& jumptarget, const int& jumptable);",
    "void JUMPTABLE_Initialize_QuietMoves(player, PIECETYPE_KING, pMoveGen, nextMove, JUMPTARGETS_KING, JUMPTABLE_KING_QUIET);",
    "void JUMPTABLE_Initialize_QuietMoves(player, PIECETYPE_KNIGHT, pMoveGen, nextMove, JUMPTARGETS_KNIGHT, JUMPTABLE_KNIGHT_QUIET);",
    "void KING_CountMoves(const MG_MOVEGEN* pMoveGen);",
    "void KING_GenerateCastleMoves(const MG_MOVEGEN* pMoveGen, MG_POSITION* pPosition, const MG_PIECETYPE& piece, MG_MOVELIST* pMoveList);",
    "void KING_Initialize_CaptureMoves(const MG_PLAYER& player, const MG_PIECETYPE& capturedPiece, MG_MOVEGEN* pMoveGen, MG_MOVE& nextMove);",
    "void KING_Initialize_CaptureMoves(movingPlayer, capturedPiece, pMoveGen, nextMove);",
    "void KING_Initialize_CastleMoves(const MG_PLAYER& player, MG_MOVEGEN* pMoveGen, MG_MOVE& nextMove);",
    "void KING_Initialize_CastleMoves(movingPlayer, pMoveGen, nextMove);",
    "void KING_Initialize_PieceInfo(&pMoveGen->PieceInfo[movingPlayer][PIECETYPE_KING]);",
    "void KING_Initialize_PieceInfo(MG_PIECEINFO* pPieceInfo);",
    "void KING_Initialize_QuietMoves(const MG_PLAYER& player, MG_MOVEGEN* pMoveGen, MG_MOVE& nextMove);",
    "void KING_Initialize_QuietMoves(movingPlayer, pMoveGen, nextMove);",
    "void KING_Initialize_Targets(MG_MOVEGEN* pMoveGen);",
    "void KING_Initialize_Targets(pMoveGen);",
    "void KING_MovesFromSquare(const BB_SQUARE& squareFrom);",
    "void KNIGHT_CountMoves(const MG_MOVEGEN* pMoveGen);",
    "void KNIGHT_Initialize_CaptureMoves(const MG_PLAYER& player, const MG_PIECETYPE& capturedPiece, MG_MOVEGEN* pMoveGen, MG_MOVE& nextMove);",
    "void KNIGHT_Initialize_CaptureMoves(movingPlayer, capturedPiece, pMoveGen, nextMove);",
    "void KNIGHT_Initialize_PieceInfo(&pMoveGen->PieceInfo[movingPlayer][PIECETYPE_KNIGHT]);",
    "void KNIGHT_Initialize_PieceInfo(MG_PIECEINFO* pPieceInfo);",
    "void KNIGHT_Initialize_QuietMoves(const MG_PLAYER& player, MG_MOVEGEN* pMoveGen, MG_MOVE& nextMove);",
    "void KNIGHT_Initialize_QuietMoves(movingPlayer, pMoveGen, nextMove);",
    "void KNIGHT_Initialize_Targets(MG_MOVEGEN* pMoveGen);",
    "void KNIGHT_Initialize_Targets(pMoveGen);",
    "void KNIGHT_MovesFromSquare(const BB_SQUARE& squareFrom);",
    "void MOVE(const MG_PLAYER& player, const MG_PIECETYPE& piece, const BB_SQUARE& from, const BB_SQUARE& to, const MG_MOVETYPE& moveType);",
    "void MOVEGEN_CountMoves(const MG_MOVEGEN* pMoveGen, const MG_PLAYER& movingPlayer);",
    "void MOVEGEN_Deinitialize(MG_MOVEGEN* pMoveGen);",
    "void MOVEGEN_FinalizeMove(const MG_MOVEGEN* pMoveGen, MG_MOVELIST* pMoveList, MG_POSITION* pPosition, const MG_MOVE& move);",
    "void MOVEGEN_FinalizeMove(pMoveGen, pMoveList, pPosition, move);",
    "void MOVEGEN_FinalizeMove(pMoveGen, pMoveList, pPosition, pMoveGen->CastleBase[movingPlayer] + 1);",
    "void MOVEGEN_FinalizeMove(pMoveGen, pMoveList, pPosition, pMoveGen->CastleBase[movingPlayer]);",
    "void MOVEGEN_GenerateMoves(const MG_MOVEGEN* pMoveGen, MG_POSITION* pPosition, MG_MOVELIST* pMoveList);",
    "void MOVEGEN_GetMoveString(const MG_MOVEGEN* pMoveGen, const MG_PLAYER& player, const MG_MOVE& move);",
    "void MOVEGEN_GetPieceAttacks(const MG_MOVEGEN* pMoveGen, const MG_POSITION* pPosition, const MG_PIECETYPE& piece, const MG_PLAYER& player, BB_BITBOARD& outInterest);",
    "void MOVEGEN_Initialize(MG_MOVEGEN* pMoveGen);",
    "void MOVEGEN_MakeMove(const MG_MOVEGEN* pMoveGen, const MG_MOVE& move, MG_MOVEDATA* pOutMoveData, MG_POSITION* pPosition);",
    "void MOVEGEN_MakeTentativeMove(const MG_MOVEGEN* pMoveGen, const MG_MOVE& move, MG_TENTATIVEMOVEDATA* pOutMoveData, MG_POSITION* pPosition);",
    "void MOVEGEN_MakeTentativeMove(pMoveGen, move, &moveData, pPosition);",
    "void MOVEGEN_ParseMoveString(const MG_MOVEGEN* pMoveGen, const MG_PLAYER& player, const MG_MOVELIST* pMoveList, const char* pString, const int& len, int& strPos, MG_MOVE& outParsed);",
    "void MOVEGEN_RecomputeAttacks(const MG_MOVEGEN* pMoveGen, MG_POSITION* pPosition, const MG_PLAYER& player);",
    "void MOVEGEN_RecomputeAttacks(pMoveGen, pPosition, player);",
    "void MOVEGEN_UnmakeMove(const MG_MOVEGEN* pMoveGen, const MG_MOVE& move, const MG_MOVEDATA* pMoveData, MG_POSITION* pPosition);",
    "void MOVEGEN_UnmakeTentativeMove(const MG_MOVEGEN* pMoveGen, const MG_MOVE& move, const MG_TENTATIVEMOVEDATA* pMoveData, MG_POSITION* pPosition);",
    "void MOVEGEN_UnmakeTentativeMove(pMoveGen, move, &moveData, pPosition);",
    "void MOVEINFO_InitializeMoveString(MG_MOVEGEN* pMoveGen, const MG_PLAYER& player, const MG_MOVE& move, const BB_SQUARE& fromSquare, const BB_SQUARE& toSquare);",
    "void MOVELIST_Initialize(MG_MOVELIST* pMoveList);",
    "void MOVELIST_Initialize(pMoveList);",
    "void MOVE_InitializeNullMove(MG_MOVEINFO* pMoveInfo, const MG_PLAYER& movingPlayer);",
    "void MOVE_InitializeNullMove(pMoveGen->MoveTable[movingPlayer], movingPlayer);",
    "void MOVE_InitializeNullMoveString(MG_MOVEGEN* pMoveGen, const MG_PLAYER& movingPlayer);",
    "void MOVE_InitializeNullMoveString(pMoveGen, movingPlayer);",
    "void PAWN_CountCaptureMoves();",
    "void PAWN_CountMoves();",
    "void PAWN_CountQuietMoves() + PAWN_CountCaptureMoves();",
    "void PAWN_CountQuietMoves();",
    "void PAWN_GenerateCaptureMoves(const MG_MOVEGEN* pMoveGen, MG_POSITION* pPosition, const MG_PIECETYPE& piece, MG_MOVELIST* pMoveList);",
    "void PAWN_GenerateQuietMoves(const MG_MOVEGEN* pMoveGen, MG_POSITION* pPosition, const MG_PIECETYPE& piece, MG_MOVELIST* pMoveList);",
    "void PAWN_GetPawnAttacks(const MG_MOVEGEN* pMoveGen, const MG_POSITION* pPosition, const MG_PIECETYPE& piece, const MG_PLAYER& player, BB_BITBOARD& outInterest);",
    "void PAWN_GetPawnAttacks(pMoveGen, pPosition, piece, player, outInterest);",
    "void PAWN_Initialize_CaptureMoves(const MG_PLAYER& player, MG_MOVEGEN* pMoveGen, MG_MOVE& nextMove);",
    "void PAWN_Initialize_PieceInfo(&pMoveGen->PieceInfo[movingPlayer][PIECETYPE_PAWN]);",
    "void PAWN_Initialize_QuietMoves(const MG_PLAYER& player, MG_MOVEGEN* pMoveGen, MG_MOVE& nextMove);",
    "void PIECETYPE_Parse(const char* pString, const int& len, int& strPos, MG_PIECETYPE& outParsedPiece, MG_PLAYER& outParsedPlayer);",
    "void PIECETYPE_ToString(char* pString, const int& len, int& strPos, const MG_PIECETYPE& piece, const MG_PLAYER& player);",
    "void PLAYER_Parse(const char* pString, const int& len, int& strPos, MG_PLAYER& outParsedPlayer);",
    "void PLAYER_ToString(char* pString, const int& len, int& strPos, const MG_PLAYER& player);",
    "void POSITION_CheckConsistency(const MG_POSITION* pPosition, const BB_SQUARE& square);",
    "void POSITION_Clear(MG_POSITION* pPosition);",
    "void POSITION_ComputeHash(const MG_POSITION* pPosition);",
    "void POSITION_Equals(const MG_POSITION* pPosition1, const MG_POSITION* pPosition2);",
    "void POSITION_GetPiece(const MG_POSITION* pPosition, const BB_SQUARE& square, MG_PLAYER& outPlayer, MG_PIECETYPE& outPiece);",
    "void POSITION_Initialize(const MG_MOVEGEN* pMoveGen, MG_POSITION* pPosition);",
    "void POSITION_Parse(const MG_MOVEGEN* pMoveGen, const char* pString, const int& len, int& strPos, MG_POSITION& outParsed);",
    "void POSITION_SetCastleRights(&outParsed, castleFlags);",
    "void POSITION_SetCastleRights(MG_POSITION* pPosition, const MG_CASTLEFLAGS& castlingRights);",
    "void POSITION_SetEnPassantFile(MG_POSITION* pPosition, const BB_FILEINDEX& epFileIdx);",
    "void POSITION_SetMovingPlayer(MG_POSITION* pPosition, const MG_PLAYER& movingPlayer);",
    "void POSITION_SetPiece(const MG_MOVEGEN* pMoveGen, MG_POSITION* pPosition, const MG_PLAYER& player, const MG_PIECETYPE& piece, const BB_SQUARE& square);"
  ],
  "explanations": {
    "move_mechanics": "The move generator recognizes three types of moves: quiet, capture, and special. For each combination of piece type and move type, a specific MoveMechanic is assigned. These are stored in MG_PIECEINFO::MoveMechanic[COUNT_MOVETYPES]. Additionally, each combination refers to a lookup table through MG_PIECEINFO::TableIndex, with TABLEINDEX_QUIET = 0, TABLEINDEX_SPECIAL = 1, and TABLEINDEX_CAPTURE(piece) = 2 + piece. The MoveMechanic determines whether a piece is a jumper, slider, or follows some other generation logic. This enables fast and modular move generation keyed by mechanics rather than individual piece logic."
  }
}