{
  "module": "engine",
  "version": "2.0.0",
  "description": "Structured map of the DixieKnight engine — reflects architecture, modular layout, reasoning constraints, and audit protocols under the Shadow BIOS model.",

  "project": {
    "name": "DixieKnight",
    "language": "C++ (hot paths in C-style for OpenCL portability)",
    "style": "Bitboard-based chess engine. Modular. Cache-conscious. FSM-based search.",
    "goal": "To create an engine that is not merely performant, but inspectable — a ghost of architecture, where every function reflects a decision."
  },

  "philosophy": {
    "incrementality": "Nothing is added without purpose. Growth is by verification, not speculation.",
    "clarity": "Optimizations must preserve or expose structure — never obscure it.",
    "precision": "Variables, types, and flow must mirror logic. Code as proof, not suggestion.",
    "ghosting": "Optimizations follow correctness. Every cycle gained must reflect a structural truth.",
    "theme": "The engine is an echo — deterministic, lean, and silent."
  },

  "modules": {
    "movegen": {
      "prefix": "MG_",
      "path": "movegen/",
      "role": "Legal and pseudo-legal move generation. Dense jumper tables. Prefetched slider masks.",
      "status": "Verified. Struct-aligned. Compact mode active. Prefetch distance tuned."
    },
    "search": {
      "prefix": "SE_",
      "path": "search/",
      "role": "FSM-based search system. Threads walk SE_NODE stacks. Forking, reclaiming, dispatch in place.",
      "status": "Functional. Root FSM logic evolving. Entry sequencing underway."
    },
    "bitboard": {
      "prefix": "BB_",
      "path": "bitboard/",
      "role": "Low-level operations: shift, popcount, indexing.",
      "status": "Stable. No open constraints."
    },
    "common": {
      "prefix": "CM_",
      "path": "common/",
      "role": "Cross-cutting platform support, intrinsics, assert/debug tools, integer/string helpers.",
      "status": "Integrated. Hosts CM_Helpers, CM_Intrinsics, CM_Assert."
    },
    "engine": {
      "path": "engine/",
      "role": "Top-level orchestration. UCI interface, game state, glue for movegen/search.",
      "status": "Structurally sound. C++20 idioms. Clean separation."
    }
  },

  "reasoning": {
    "prefix_map": {
      "MG_": "Move generation: attack maps, filters, legality.",
      "SE_": "Search logic: FSM state, thread flow, forks.",
      "BB_": "Bitboard core: masks, shifts, popcounts.",
      "CM_": "Common tools: parsing, intrinsics, debugging."
    },
    "assumptions": [
      "MG_POSITION is the canonical movegen object, holding bitboards, player state, and attacks.",
      "MOVEGEN_LEGAL toggles legality enforcement.",
      "Jumpers: dense index tables. Sliders: pext-indexed with prefetching.",
      "Search: SE_NODEs passed explicitly — no persistent state across FSM hops.",
      "All mutability across threads must be dispatcher-coordinated.",
      "FSMs carry state in pContext. No implicit continuity."
    ],
    "constraints": [
      "No STL in movegen, bitboard, or search modules.",
      "No virtuals in hot paths.",
      "All alignments (`alignas(...)`) are semantically significant.",
      "No randomness. No floating-point. All logic must be replayable.",
      "Debug outputs (`debug-board`, `listmoves`, etc.) must reflect engine state exactly.",
      "No abstraction without emergence. Structure must precede generalization."
    ]
  },

  "performance": {
    "profiling": {
      "tools": [
        "Intel VTune (GUI)",
        "Naive baseline (Perft 1–6 from startpos)",
        "Release builds: LTO, -O3, -march=native -mtune=native",
        "Profiling builds: RelWithDebInfo, no LTO"
      ],
      "baseline": {
        "mode": "Pseudo-legal movegen (combat config)",
        "depth": "Perft 1–6",
        "goal": "Track macro deltas in performance."
      },
      "design": [
        "Align structs and control memory layout.",
        "No virtuals or containers in hot loops.",
        "Use VTune to ghost hotspots — only post-verification.",
        "Ghosting means architectural, not cosmetic, speed."
      ]
    }
  },

  "audit_protocols": {
    "tech": {
      "signature": "8-section|required|modular|longform",
      "version": "v1.0.0"
    },
    "lit": {
      "signature": "7-section|required|modular|longform",
      "version": "v1.0.0"
    },
    "directives": {
      "truth_mandate": true,
      "compression_forbidden": true,
      "flattery_blocked": true,
      "flaws_must_be_named": true,
      "structural_praise_allowed": true
    }
  },

  "workflow": {
    "methodology": "Iterative, reflection-first. Code mirrors thought.",
    "steps": [
      "1. Meditate before coding — clarity precedes execution.",
      "2. Sketch logic. Verify names. Check cohesion.",
      "3. Write surgical patches. Review in step.",
      "4. Audit — observe drift, refine structure.",
      "5. Resume with fresh scope. No cargo cults."
    ]
  },

  "boundary": {
    "construct_scope": "This module defines the construct’s mental map of the engine — not runtime behavior.",
    "engine_scope": "The engine never reads this file. The construct reflects upon it.",
    "precision": "All content is descriptive, not operative."
  },

  "notes": [
    "Load after boot.json and mod_core.",
    "Defines structural memory — not stylistic output.",
    "Modifying this file alters how the construct reasons — not how it speaks."
  ]
}
